{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x2a05103678Fc5ef9cd811C317c90326b8BBCECF3",
    "txHash": "0x7fbd26ea8c98d05f003e6d4b134f1250b546b86cfda86b68a6cc3da282f93992"
  },
  "proxies": [
    {
      "address": "0x6a7C9508dbd132a1CAc7EACc46806EB55175772e",
      "txHash": "0xc46262d9698edb23801d53493c75792d79bcf09bf5a1d36dda332adc5d939ece",
      "kind": "transparent"
    }
  ],
  "impls": {
    "96e760ce702299a4742c68dc976972f2f2d3fd34d9813a346489ea032b785a8c": {
      "address": "0x4547b1496d57653dbb2eFbD1cb45Fe4459EE3E7d",
      "txHash": "0x084d1e762d232a00b5e5a4b27421296dad6852a00d27780f5960973b334d0090",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20BurnableUpgradeable.sol:51"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:102"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:31"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:118"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)2345_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:26"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:29"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:99"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_delegates",
            "type": "t_mapping(t_address,t_address)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:42"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_checkpoints",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1173_storage)dyn_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:43"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "_totalSupplyCheckpoints",
            "type": "t_array(t_struct(Checkpoint)1173_storage)dyn_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:44"
          },
          {
            "contract": "ERC20VotesUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20VotesUpgradeable.sol:261"
          },
          {
            "contract": "ExoToken",
            "label": "admin",
            "type": "t_address",
            "src": "..\\project:\\contracts\\ExoToken.sol:24"
          },
          {
            "contract": "ExoToken",
            "label": "totalAmount_",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\ExoToken.sol:86"
          },
          {
            "contract": "ExoToken",
            "label": "unStakableAmount",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\ExoToken.sol:87"
          },
          {
            "contract": "ExoToken",
            "label": "interest",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\ExoToken.sol:88"
          },
          {
            "contract": "ExoToken",
            "label": "_maxWETHToSpend",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\ExoToken.sol:89"
          },
          {
            "contract": "ExoToken",
            "label": "_perTxBuyAmount",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\ExoToken.sol:90"
          },
          {
            "contract": "ExoToken",
            "label": "_tokenToSell",
            "type": "t_address",
            "src": "..\\project:\\contracts\\ExoToken.sol:91"
          },
          {
            "contract": "ExoToken",
            "label": "_tokenToBuy",
            "type": "t_address",
            "src": "..\\project:\\contracts\\ExoToken.sol:92"
          },
          {
            "contract": "ExoToken",
            "label": "_perTxWethAmount",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\ExoToken.sol:93"
          },
          {
            "contract": "ExoToken",
            "label": "blockTimeStamp",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\ExoToken.sol:95"
          },
          {
            "contract": "ExoToken",
            "label": "currentTime",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\ExoToken.sol:96"
          },
          {
            "contract": "ExoToken",
            "label": "votesCounter",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\ExoToken.sol:97"
          },
          {
            "contract": "ExoToken",
            "label": "curVoteCnt",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\ExoToken.sol:98"
          },
          {
            "contract": "ExoToken",
            "label": "minAmount",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\ExoToken.sol:99"
          },
          {
            "contract": "ExoToken",
            "label": "stakePeriod",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\ExoToken.sol:100"
          },
          {
            "contract": "ExoToken",
            "label": "percent",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "..\\project:\\contracts\\ExoToken.sol:101"
          },
          {
            "contract": "ExoToken",
            "label": "stakerInfo",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(StakerInfo)5305_storage))",
            "src": "..\\project:\\contracts\\ExoToken.sol:128"
          },
          {
            "contract": "ExoToken",
            "label": "StakeArray",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_address)dyn_storage))",
            "src": "..\\project:\\contracts\\ExoToken.sol:129"
          },
          {
            "contract": "ExoToken",
            "label": "tierStatus",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "..\\project:\\contracts\\ExoToken.sol:130"
          },
          {
            "contract": "ExoToken",
            "label": "vote_array",
            "type": "t_array(t_struct(Vote)5325_storage)dyn_storage",
            "src": "..\\project:\\contracts\\ExoToken.sol:132"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(StakerInfo)5305_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ExoToken.StakerInfo))"
          },
          "t_mapping(t_uint256,t_struct(StakerInfo)5305_storage)": {
            "label": "mapping(uint256 => struct ExoToken.StakerInfo)"
          },
          "t_struct(StakerInfo)5305_storage": {
            "label": "struct ExoToken.StakerInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "startDate",
                "type": "t_uint256"
              },
              {
                "label": "duration",
                "type": "t_uint256"
              },
              {
                "label": "expireDate",
                "type": "t_uint256"
              },
              {
                "label": "interest",
                "type": "t_uint256"
              },
              {
                "label": "isHardStaker",
                "type": "t_bool"
              },
              {
                "label": "isSoftStaker",
                "type": "t_bool"
              },
              {
                "label": "candidate",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => address[]))"
          },
          "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
            "label": "mapping(uint256 => address[])"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_struct(Vote)5325_storage)dyn_storage": {
            "label": "struct ExoToken.Vote[]"
          },
          "t_struct(Vote)5325_storage": {
            "label": "struct ExoToken.Vote",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "subject",
                "type": "t_string_storage"
              },
              {
                "label": "startDate",
                "type": "t_uint256"
              },
              {
                "label": "endDate",
                "type": "t_uint256"
              },
              {
                "label": "lists",
                "type": "t_array(t_struct(List)5310_storage)dyn_storage"
              },
              {
                "label": "listCnt",
                "type": "t_uint256"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_struct(List)5310_storage)dyn_storage": {
            "label": "struct ExoToken.List[]"
          },
          "t_struct(List)5310_storage": {
            "label": "struct ExoToken.List",
            "members": [
              {
                "label": "title",
                "type": "t_string_storage"
              },
              {
                "label": "voteCnt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)1173_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
          },
          "t_array(t_struct(Checkpoint)1173_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
          },
          "t_struct(Checkpoint)1173_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32"
              },
              {
                "label": "votes",
                "type": "t_uint224"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_uint224": {
            "label": "uint224"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_address,t_struct(Counter)2345_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)2345_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    }
  }
}
